plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'jacoco'
}

android {
    namespace 'com.example.sprintproject'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.sprintproject"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true // Enable test coverage for debug builds
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.activity:activity:1.8.0'
    implementation 'androidx.annotation:annotation:1.6.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    implementation 'com.google.firebase:firebase-database:21.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation(platform("com.google.firebase:firebase-bom:33.4.0"))
    implementation("com.google.firebase:firebase-auth")
    implementation 'com.google.firebase:firebase-firestore:25.1.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.6'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.8.6'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.10" // Set JaCoCo version
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*'
]

def jacocoTestReport = tasks.create("jacocoTestReport", JacocoReport) {
    dependsOn = ["testDebugUnitTest"] // Depends on unit tests

    group = "Reporting"
    description = "Generate JaCoCo coverage report."

    reports {
        xml.required.set(true) // XML for SonarQube or other tools
        html.required.set(true) // Human-readable HTML report
    }

    classDirectories.setFrom(fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter))
    sourceDirectories.setFrom(files(["src/main/java", "src/main/kotlin"]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: ["**/*.exec", "**/*.ec"]))
}

// Task to generate coverage for UI tests (optional, for instrumented tests)
//tasks.create("jacocoInstrumentedTestReport", JacocoReport) {
//    dependsOn = ["connectedDebugAndroidTest"] // For instrumented tests
//
//    group = "Reporting"
//    description = "Generate JaCoCo coverage report for instrumented tests."
//
//    reports {
//        xml.required.set(true)
//        html.required.set(true)
//    }
//
//    classDirectories.setFrom(fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter))
//    sourceDirectories.setFrom(files(["src/main/java", "src/main/kotlin"]))
//    executionData.setFrom(fileTree(dir: "$buildDir", includes: ["**/*.exec", "**/*.ec"]))
//}
